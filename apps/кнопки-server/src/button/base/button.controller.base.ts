/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ButtonService } from "../button.service";
import { ButtonCreateInput } from "./ButtonCreateInput";
import { Button } from "./Button";
import { ButtonFindManyArgs } from "./ButtonFindManyArgs";
import { ButtonWhereUniqueInput } from "./ButtonWhereUniqueInput";
import { ButtonUpdateInput } from "./ButtonUpdateInput";

export class ButtonControllerBase {
  constructor(protected readonly service: ButtonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Button })
  async createButton(@common.Body() data: ButtonCreateInput): Promise<Button> {
    return await this.service.createButton({
      data: data,
      select: {
        color: true,
        createdAt: true,
        id: true,
        isActive: true,
        size: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Button] })
  @ApiNestedQuery(ButtonFindManyArgs)
  async buttons(@common.Req() request: Request): Promise<Button[]> {
    const args = plainToClass(ButtonFindManyArgs, request.query);
    return this.service.buttons({
      ...args,
      select: {
        color: true,
        createdAt: true,
        id: true,
        isActive: true,
        size: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Button })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async button(
    @common.Param() params: ButtonWhereUniqueInput
  ): Promise<Button | null> {
    const result = await this.service.button({
      where: params,
      select: {
        color: true,
        createdAt: true,
        id: true,
        isActive: true,
        size: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Button })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateButton(
    @common.Param() params: ButtonWhereUniqueInput,
    @common.Body() data: ButtonUpdateInput
  ): Promise<Button | null> {
    try {
      return await this.service.updateButton({
        where: params,
        data: data,
        select: {
          color: true,
          createdAt: true,
          id: true,
          isActive: true,
          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Button })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteButton(
    @common.Param() params: ButtonWhereUniqueInput
  ): Promise<Button | null> {
    try {
      return await this.service.deleteButton({
        where: params,
        select: {
          color: true,
          createdAt: true,
          id: true,
          isActive: true,
          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
